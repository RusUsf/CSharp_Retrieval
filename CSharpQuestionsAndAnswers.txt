// Q1: How to write a "Hello, World!" program?
// A1:
Console.WriteLine("Hello, World!");

// Q2: How to declare and initialize an integer variable?
// A2:
int myNumber = 5;

// Q3: How to perform a basic conditional check using an if statement?
// A3:
if (myNumber > 10) { Console.WriteLine("Number is greater than 10."); }

// Q4: What is the correct way to define a method that adds two numbers?
// A4:
public int AddNumbers(int a, int b) { return a + b; }

// Q5: How can you loop through an array of integers using a foreach loop?
// A5:
int[] numbers = {1, 2, 3, 4, 5};
foreach(int number in numbers) { Console.WriteLine(number); }

// Q6: How can you define a class with a property named Age?
// A6:
public class Person { public int Age { get; set; } }

// Q7: How do you create an object of the class Person?
// A7:
Person person = new Person();

// Q8: How do you handle exceptions using try-catch?
// A8:
try { /* Code that might throw an exception */ } catch (Exception e) { Console.WriteLine(e.Message); }

// Q9: How do you read a line of input from the console?
// A9:
string input = Console.ReadLine();

// Q10: How can you define an enumeration?
// A10:
enum Days { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };

// Q11: How can you concatenate strings?
// A11:
string firstName = "John";
string lastName = "Doe";
string fullName = firstName + " " + lastName;

// Q12: What is a correct way to define a constant variable?
// A12:
const int myConstant = 42;

// Q13: How do you write a switch statement?
// A13:
switch (dayOfWeek) {
    case Days.Monday: Console.WriteLine("It's Monday!"); break;
    default: Console.WriteLine("Invalid day!"); break;
}

// Q14: How do you declare and use a delegate?
// A14:
public delegate void MyDelegate(string message);
public void ShowMessage(string message) { Console.WriteLine(message); }
MyDelegate myDelegate = ShowMessage;
myDelegate("Hello, Delegate!");

// Q15: How do you define and call a lambda expression?
// A15:
Func<int, int, int> add = (x, y) => x + y;
int sum = add(3, 4);

// Q16: How can you instantiate a list of integers?
// A16:
List<int> numbers = new List<int> {1, 2, 3, 4, 5};

// Q17: How do you convert a string to an integer?
// A17:
int number = int.Parse("42");

// Q18: How do you define a structure?
// A18:
struct Point { public int X; public int Y; }

// Q19: How can you define and start a new thread?
// A19:
Thread myThread = new Thread(() => { Console.WriteLine("Hello, Thread!"); });
myThread.Start();

// Q20: How to define an interface?
// A20:
public interface IAnimal { void Speak(); }

// Q21: How to use LINQ to query a collection of integers?
// A21:
var numbers = new List<int> { 1, 2, 3, 4, 5 };
var evenNumbers = numbers.Where(n => n % 2 == 0);

// Q22: How to asynchronously read a text file?
// A22:
using (StreamReader reader = new StreamReader("file.txt"))
{
    string content = await reader.ReadToEndAsync();
}

// Q23: How to create a property with a private setter?
// A23:
public class MyClass
{
    public int MyProperty { get; private set; }
}

// Q24: How to handle different exceptions using multiple catch blocks?
// A24:
try
{
    // Code that might throw an exception
}
catch (FileNotFoundException e)
{
    Console.WriteLine("File not found!");
}
catch (Exception e)
{
    Console.WriteLine("General exception!");
}

// Q25: How to use string interpolation?
// A25:
string name = "John";
string greeting = $"Hello, {name}!";

// Q26: How to use the 'using' statement for automatic resource management?
// A26:
using (StreamWriter writer = new StreamWriter("file.txt"))
{
    writer.WriteLine("Hello, File!");
}

// Q27: How to use extension methods?
// A27:
public static class StringExtensions
{
    public static string ToLowerCase(this string input)
    {
        return input.ToLower();
    }
}
string myString = "Hello";
myString = myString.ToLowerCase();

// Q28: How to use indexers in a class?
// A28:
public class MyCollection
{
    private int[] data = new int[10];
    public int this[int index]
    {
        get { return data[index]; }
        set { data[index] = value; }
    }
}

// Q29: How to use named and optional parameters in a method?
// A29:
public void MyMethod(int required, int optional = 42, string name = "Default")
{
    // Implementation here
}
MyMethod(1, name: "Custom");

// Q30: How to use attributes in C#?
// A30:
[Obsolete("This method is obsolete, use NewMethod instead.")]
public void OldMethod()
{
    // Implementation here
}

// Q31: How to declare and use a nullable value type?
// A31:
int? nullableInt = null;

// Q32: How to implement the Singleton pattern in C#?
// A32:
public class Singleton
{
    private static Singleton instance;
    private Singleton() { }
    public static Singleton Instance
    {
        get
        {
            if (instance == null) instance = new Singleton();
            return instance;
        }
    }
}

// Q33: How to use the 'yield' keyword to create an iterator?
// A33:
public IEnumerable<int> GetNumbers()
{
    for (int i = 0; i < 5; i++) yield return i;
}

// Q34: How to implement a generic method?
// A34:
public T Add<T>(T a, T b) where T : struct { return a + b; }

// Q35: How to perform a deep copy of an object?
// A35:
public class MyClass
{
    public object Clone()
    {
        return this.MemberwiseClone();
    }
}

// Q36: How to check if a string contains another string?
// A36:
string mainString = "Hello, World!";
bool contains = mainString.Contains("World");

// Q37: How to use the 'async' and 'await' keywords for asynchronous programming?
// A37:
public async Task MyMethodAsync()
{
    await Task.Delay(1000);
    Console.WriteLine("Done!");
}

// Q38: How to implement event handling in C#?
// A38:
public class MyEvent
{
    public event EventHandler MyEventHandler;
    public void RaiseEvent()
    {
        MyEventHandler?.Invoke(this, EventArgs.Empty);
    }
}

// Q39: How to use the 'ref' keyword to pass a parameter by reference?
// A39:
public void ModifyNumber(ref int number)
{
    number = 10;
}
int myNumber = 5;
ModifyNumber(ref myNumber);

// Q40: How to declare and use an anonymous type?
// A40:
var person = new { FirstName = "John", LastName = "Doe" };
