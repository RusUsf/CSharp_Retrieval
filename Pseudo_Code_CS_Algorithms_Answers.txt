using System;
using System.Collections.Generic;

class AdvancedCSChallenges
{
    // Sorting Algorithm (Insertion Sort)
    public static void InsertionSort(int[] array)
    {
        for (int i = 1; i < array.Length; i++)
        {
            int key = array[i];
            int j = i - 1;
            while (j >= 0 && array[j] > key)
            {
                array[j + 1] = array[j];
                j = j - 1;
            }
            array[j + 1] = key;
        }
    }

    // Binary Search
    public static int BinarySearch(int[] array, int target)
    {
        int low = 0;
        int high = array.Length - 1;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (array[mid] == target)
                return mid;
            else if (array[mid] < target)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return -1;
    }

    // Find Largest Number
    public static int FindLargest(int[] array)
    {
        int largest = array[0];
        foreach (var item in array)
        {
            if (item > largest)
                largest = item;
        }
        return largest;
    }

    // Fibonacci Sequence (Recursive)
    public static int Fibonacci(int n)
    {
        if (n <= 1)
            return n;
        else
            return Fibonacci(n - 1) + Fibonacci(n - 2);
    }

    // Breadth-First Search (Graph Traversal)
    // Assuming a graph is represented as an adjacency list
    public static void BFS(Dictionary<int, List<int>> graph, int startNode)
    {
        Queue<int> queue = new Queue<int>();
        HashSet<int> visited = new HashSet<int>();

        queue.Enqueue(startNode);
        visited.Add(startNode);

        while (queue.Count > 0)
        {
            int currentNode = queue.Dequeue();
            Console.WriteLine(currentNode);
            foreach (var neighbor in graph[currentNode])
            {
                if (!visited.Contains(neighbor))
                {
                    queue.Enqueue(neighbor);
                    visited.Add(neighbor);
                }
            }
        }
    }
}

// BARD Answers
// Big O Challenge Examples

// Challenge 1: Finding Maximum Value

// Input: An array of integers
// Output: The maximum value in the array

function findMax(array):
  currentMax = array[0]  // Initialize currentMax to the first element
  for i = 1 to array.length - 1:  // Iterate through the array
    if array[i] > currentMax:
      currentMax = array[i]  // Update currentMax if a larger value is found
  return currentMax

// Challenge 2: Finding Duplicates

// Input: An array of integers
// Output: A list of duplicate elements in the array

function findDuplicates(array):
  duplicates = []  // Create an empty list to store duplicates
  for i = 0 to array.length - 1:
    for j = i + 1 to array.length - 1:
      if array[i] == array[j]:
        duplicates.append(array[i])  // Add the duplicate to the list
  return duplicates

// Challenge 3: Sorting an Array

// Input: An array of integers
// Output: The sorted array

function bubbleSort(array):
  for i = 0 to array.length - 2:
    for j = 0 to array.length - i - 2:
      if array[j] > array[j + 1]:
        swap(array[j], array[j + 1])  // Swap elements if they are in the wrong order
  return array
