// Sorting Algorithm (Insertion Sort)
// Use Case 1: Sorting student grades before displaying them on a report card.
// Use Case 2: Sorting daily expenses for a budget tracking application.
// Use Case 3: Organizing a list of products by expiration date in a warehouse.
// Use Case 4: Arranging event participants by registration time.
// Use Case 5: Sorting books by title in a small library management system.
function sort(array)
  for i from 1 to length(array)
    key = array[i]
    j = i - 1
    while j >= 0 and array[j] > key
      array[j + 1] = array[j]
      j = j - 1
    end while
    array[j + 1] = key
  end for
end function

// Binary Search
// Use Case 1: Searching for a book by its ISBN number in a sorted list of books in a library database.
// Use Case 2: Finding a specific employee ID in a sorted list of employees.
// Use Case 3: Searching for a product by its barcode in a sorted inventory list.
// Use Case 4: Locating a username in a sorted list of registered users for login verification.
// Use Case 5: Searching for a specific flight in a sorted list of available flights by departure time.
function binarySearch(array, target)
  low = 0
  high = length(array) - 1
  while low <= high
    mid = (low + high) / 2
    if array[mid] == target
      return mid
    else if array[mid] < target
      low = mid + 1
    else
      high = mid - 1
    end if
  end while
  return -1
end function

// Find the Largest Number
// Use Case 1: Finding the highest sales figure from a list of daily sales to determine peak performance.
// Use Case 2: Determining the highest temperature recorded in a month.
// Use Case 3: Identifying the largest donation made during a fundraising event.
// Use Case 4: Finding the highest bid in an auction.
// Use Case 5: Determining the maximum score achieved in a video game competition.
function findLargest(array)
  largest = array[0]
  for each item in array
    if item > largest
      largest = item
    end if
  end for
  return largest
end function

// Fibonacci Sequence (Recursive)
// Use Case 1: Calculating the Fibonacci sequence for estimating population growth or modeling a financial forecast.
// Use Case 2: Determining the number of ways to climb a staircase with one or two steps at a time.
// Use Case 3: Modeling the growth of rabbit populations under ideal conditions.
// Use Case 4: Generating numbers for an art pattern based on Fibonacci numbers.
// Use Case 5: Calculating compound interest over discrete intervals where each term is dependent on the previous.
function fibonacci(n)
  if n <= 1
    return n
  end if
  return fibonacci(n-1) + fibonacci(n-2)
end function

// Graph Traversal (Breadth-First Search)
// Use Case 1: Finding the shortest path between two people in a social network, such as determining degrees of separation.
// Use Case 2: Finding the shortest route in a city’s public transportation system.
// Use Case 3: Determining the minimum number of moves needed to solve a puzzle.
// Use Case 4: Identifying connected components in a network (e.g., friends in a social network).
// Use Case 5: Finding all reachable nodes from a given starting point in a computer network.
function BFS(graph, startNode)
  queue = empty queue
  queue.enqueue(startNode)
  visited = set(startNode)
  while queue is not empty
    currentNode = queue.dequeue()
    print(currentNode)
    for each neighbor of currentNode
      if neighbor is not visited
        queue.enqueue(neighbor)
        visited.add(neighbor)
      end if
    end for
  end while
end function

// Hash Table Insertion and Lookup
// Use Case 1: Storing and retrieving user information in a web application quickly based on a unique user ID.
// Use Case 2: Implementing a cache for fast data retrieval in a software application.
// Use Case 3: Mapping product codes to product details for a point-of-sale system.
// Use Case 4: Associating student IDs with grades in an academic database.
// Use Case 5: Storing URLs and their associated metadata in a web crawler application.
function insert(table, key, value)
  index = hashFunction(key)
  table[index] = value
end function

function lookup(table, key)
  index = hashFunction(key)
  return table[index]
end function

// Merge Sort
// Use Case 1: Sorting a large dataset, such as a list of transactions, for efficient batch processing.
// Use Case 2: Sorting customer records before importing them into a database to improve query performance.
// Use Case 3: Organizing a massive list of e-commerce orders by order date.
// Use Case 4: Sorting log entries by timestamp to facilitate error detection.
// Use Case 5: Sorting files by size in a file system before archiving.
function mergeSort(array)
  if length(array) > 1
    mid = length(array) / 2
    leftHalf = array[0...mid]
    rightHalf = array[mid...end]
    
    mergeSort(leftHalf)
    mergeSort(rightHalf)
    
    merge(array, leftHalf, rightHalf)
  end if
end function

// Depth-First Search (DFS) for Graphs
// Use Case 1: Finding all possible paths in a maze or navigating a complex decision tree in a game.
// Use Case 2: Traversing all directories and subdirectories in a file system to list all files.
// Use Case 3: Detecting cycles in a graph, such as dependencies in software modules.
// Use Case 4: Solving puzzles that require backtracking, such as Sudoku.
// Use Case 5: Generating all possible moves in a chess game to evaluate future game states.
function DFS(graph, startNode)
  stack = empty stack
  stack.push(startNode)
  visited = set(startNode)
  while stack is not empty
    currentNode = stack.pop()
    print(currentNode)
    for each neighbor of currentNode
      if neighbor is not visited
        stack.push(neighbor)
        visited.add(neighbor)
      end if
    end for
  end while
end function

// Dynamic Programming: Fibonacci Sequence
// Use Case 1: Optimizing recursive Fibonacci for faster computation, such as calculating compound interest over long periods.
// Use Case 2: Calculating the number of ways to partition a number in mathematical problems.
// Use Case 3: Finding the number of distinct paths in a grid (e.g., robot navigation).
// Use Case 4: Optimizing resource allocation problems, such as knapsack.
// Use Case 5: Efficiently solving problems involving overlapping subproblems like string alignment in bioinformatics.
function fibonacci(n)
  memo = array of size n
  if n <= 1
    return n
  else if memo[n] is not empty
    return memo[n]
  else
    memo[n] = fibonacci(n-1) + fibonacci(n-2)
    return memo[n]
  end if
end function

// Quick Sort
// Use Case 1: Sorting product prices in an e-commerce platform to quickly allow customers to view items from cheapest to most expensive.
// Use Case 2: Sorting user ratings on a review website for analysis.
// Use Case 3: Sorting meeting times in a scheduling application to identify overlaps.
// Use Case 4: Sorting elements in a video game leaderboard in real time.
// Use Case 5: Sorting test scores in a school system for statistical analysis.
function quickSort(array, low, high)
  if low < high
    pi = partition(array, low, high)
    quickSort(array, low, pi - 1)
    quickSort(array, pi + 1, high)
  end if
end function

// Finding Maximum Value (Time Complexity: O(n))
// Use Case 1: Finding the highest score in a game leaderboard to determine the top player.
// Use Case 2: Identifying the maximum profit made from multiple products.
// Use Case 3: Determining the highest peak in a set of mountain height records.
// Use Case 4: Finding the maximum temperature recorded in a weather dataset.
// Use Case 5: Identifying the most expensive item in an inventory.
public static int FindMax(int[] array)
{
  int currentMax = array[0];
  for (int i = 1; i < array.Length; i++)
  {
    if (array[i] > currentMax)
    {
      currentMax = array[i];
    }
  }
  return currentMax;
}

// Finding Duplicates (Time Complexity: O(n^2))
// Use Case 1: Identifying duplicate orders in an inventory system to prevent overstocking.
// Use Case 2: Finding repeated email addresses in a mailing list to avoid sending duplicates.
// Use Case 3: Checking for duplicate names in a guest list before an event.
// Use Case 4: Identifying repeated transactions in a bank statement to spot anomalies.
// Use Case 5: Detecting duplicate votes in a survey or poll to ensure fairness.
public static List<int> FindDuplicates(int[] array)
{
  List<int> duplicates = new List<int>();
  for (int i = 0; i < array.Length - 1; i++)
  {
    for (int j = i + 1; j < array.Length; j++)
    {
      if (array[i] == array[j] && !duplicates.Contains(array[i]))
      {
        duplicates.Add(array[i]);
      }
    }
  }
  return duplicates;
}

// Sorting an Array (Bubble Sort, Time Complexity: O(n^2))
// Use Case 1: Teaching sorting concepts to new students due to its simplicity, even though it is inefficient for large data.
// Use Case 2: Sorting a small list of numbers on a whiteboard in a classroom setting.
// Use Case 3: Demonstrating the concept of swapping elements visually in an educational context.
// Use Case 4: Sorting a deck of cards by hand using the bubble sort technique.
// Use Case 5: Sorting a short list of items for a quick demonstration of sorting algorithms.
public static void BubbleSort(int[] array)
{
  for (int i = 0; i < array.Length - 2; i++)
  {
    for (int j = 0; j < array.Length - i - 2; j++)
    {
      if (array[j] > array[j + 1])
      {
        Swap(ref array[j], ref array[j + 1]); // Swap elements using reference parameters for efficiency
      }
    }
  }
}

private static void Swap(ref int a, ref int b) // Helper function for swapping elements
{
  int temp = a;
  a = b;
  b = temp;
}
